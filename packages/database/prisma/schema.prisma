// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum SubmissionType {
  TEXT
  FILE
  CODE_EXECUTION
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  enrollments   Enrollment[]
  coursesAsInstructor Course[] @relation("CourseInstructor")
  submissions   Submission[]
  feedbackGiven Feedback[] @relation("FeedbackAuthor")
  feedbackReceived Feedback[] @relation("FeedbackRecipient")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String   @unique // e.g., "CISC474"
  semester    String   // e.g., "Fall 2025"
  instructorId String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  instructor  User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments Enrollment[]
  assignments Assignment[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
}

model Assignment {
  id          String         @id @default(cuid())
  title       String
  description String
  courseId    String
  type        SubmissionType @default(TEXT)
  maxPoints   Int            @default(100)
  dueDate     DateTime?
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relationships
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
}

model Submission {
  id            String           @id @default(cuid())
  assignmentId  String
  userId        String
  content       String?          // Text content or file path
  codeLanguage  String?          // For code execution submissions
  executionResult String?        // Output from code execution
  status        SubmissionStatus @default(DRAFT)
  grade         Float?
  submittedAt   DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relationships
  assignment    Assignment     @relation(fields: [assignmentId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  feedback      Feedback[]
  
  @@unique([assignmentId, userId])
}

model Feedback {
  id           String   @id @default(cuid())
  submissionId String
  authorId     String
  recipientId  String
  content      String
  isPrivate    Boolean  @default(false) // Private feedback only visible to recipient
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  submission   Submission @relation(fields: [submissionId], references: [id])
  author       User       @relation("FeedbackAuthor", fields: [authorId], references: [id])
  recipient    User       @relation("FeedbackRecipient", fields: [recipientId], references: [id])
}
